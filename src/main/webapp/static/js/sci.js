(()=>{"use strict";var t={d:(e,o)=>{for(var r in o)t.o(o,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:o[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{DataRow:()=>i,DataSet:()=>u,FieldDefs:()=>n,FieldMeta:()=>r,Handle:()=>o,HtmlWriter:()=>h,RemoteService:()=>p,SearchDataSet:()=>s,ServiceQuery:()=>f,TA:()=>A,TButton:()=>g,TComponent:()=>l,TDiv:()=>v,TEditText:()=>rt,TForm:()=>D,TGrid:()=>Q,TGridColumn:()=>G,TGridGroup:()=>B,TGridGroupChild:()=>K,TGridGroupMaster:()=>J,TInput:()=>L,TLine:()=>I,TMutiPage:()=>Y,TPage:()=>k,TPanel:()=>et,TSpan:()=>b,TTable:()=>C,TTd:()=>j,TText:()=>_,TTh:()=>P,TTr:()=>S,TWinForm:()=>$});const o=function(t){this.sessionId=t},r=function(){function t(t,e){this.code=null,this.name=null,this.remark=null,this.type=null,this.kind=null,this.code=t,this.kind=e}return t.prototype.getCode=function(){return this.code},t.prototype.getName=function(){return this.name},t.prototype.setName=function(t){return this.name=t,this},t.prototype.getRemark=function(){return this.remark},t.prototype.setRemark=function(t){this.remark=t},t.prototype.getType=function(){return this.type},t.prototype.setType=function(t){return this.type=t,this},t.prototype.getKind=function(){return this.kind},t.prototype.setKind=function(t){this.kind=t},Object.defineProperty(t.prototype,"onGetText",{get:function(){return this._onGetText},set:function(t){this._onGetText=t},enumerable:!1,configurable:!0}),t}(),n=function(){function t(){this.fields=[]}return t.prototype.add=function(t,e){if(void 0===e&&(e=null),this.exists(t))return this.get(t);var o=new r(t,e);return this.fields.push(o),o},t.prototype.exists=function(t){for(var e=0;e<this.fields.length;e++)if(this.fields[e].getCode()==t)return!0;return!1},t.prototype.get=function(t){var e=null;return this.fields.forEach((function(o){o.getCode()!=t||(e=o)})),e},t.prototype.size=function(){return this.fields.length},t.prototype.clear=function(){this.fields=[]},t.prototype.forEach=function(t){for(var e=0,o=this.fields;e<o.length;e++){var r=o[e];t.call(this,r)}},t.prototype.getItems=function(){return this.fields},t}(),i=function(){function t(t){void 0===t&&(t=null),this.state=0,this.items=new Map,this.delta=new Map,t?(this.dataSet=t,this.fieldDefs=t.getFieldDefs()):this.fieldDefs=new n}return t.prototype.getState=function(){return this.state},t.prototype.setState=function(t){return 2==t&&1==this.state||(0==t&&this.delta.clear(),this.state=t),this},t.prototype.close=function(){this.items.clear()},t.prototype.setValue=function(t,e){if(!t)throw new Error("field is null!");return this.addFieldDef(t),this.items.set(t,e),this},t.prototype.copyValues=function(t,e){var o=this;void 0===e&&(e=null),null==e&&(e=t.getFieldDefs()),e.forEach((function(e){o.setValue(e.getCode(),t.getValue(e.getCode()))}))},t.prototype.addFieldDef=function(t){if(null==t)throw new Error("field is null");this.fieldDefs.exists(t)||this.fieldDefs.add(t)},t.prototype.getValue=function(t){if(!t)throw new Error("field is null!");var e=this.items.get(t);return null==e?null:e},t.prototype.getString=function(t){var e=this.getValue(t);return e?""+e:""},t.prototype.getBoolean=function(t){return!!this.getValue(t)},t.prototype.getDouble=function(t){var e=this.getString(t);return parseFloat(e)?parseFloat(e):0},t.prototype.getText=function(t){var e=this.getFieldDefs().add(t);return null!=e.onGetText?e.onGetText(this,e):this.getString(t)},t.prototype.setText=function(t,e){var o=this.getFieldDefs().add(t);return null!=o.OnSetText?this.setValue(o.getCode(),o.OnSetText(this,o)):this.setValue(t,e),this},t.prototype.size=function(){return this.items.size},t.prototype.getDelta=function(){return this.delta},t.prototype.getJson=function(){for(var t={},e=0,o=this.fieldDefs.getItems();e<o.length;e++){var r=o[e].getCode();t[r]=this.getValue(r)}return JSON.stringify(t)},t.prototype.setJson=function(t){if(!t)throw new Error("jsonText is null!");var e;for(var o in e="string"==typeof t?JSON.parse(t):t)this.setValue(o,e[o])},t.prototype.getFieldDefs=function(){return this.dataSet?this.dataSet.getFieldDefs():(this.fieldDefs||(this.fieldDefs=new n),this.fieldDefs)},t.prototype.getItems=function(){return this.items},t.prototype.forEach=function(t){for(var e=0,o=this.fieldDefs.getItems();e<o.length;e++){var r=o[e].getCode();t.call(this,r,this.getValue(r))}},t.prototype.getDataSet=function(){return this.dataSet},t}(),s=function(){function t(t){this.items=new Map,this.keys=new Set,this.dataSet=t}return t.prototype.get=function(t,e){var o,r=this;if(!t)throw new Error("fields can't be null");if(0===(o="object"!=typeof e?[e]:e).length)throw new Error("keys can't values length = 0 ");if(this.fields!==t&&(this.clear(),this.fields=t,this.fields.split(";").forEach((function(t){if(r.dataSet.size()>0&&r.dataSet.getFieldDefs().size()>0&&r.dataSet.exists(t))throw new Error("field "+t+" not find !");r.keys.add(t)})),this.keys.size>0))for(this.dataSet.first();this.dataSet.fetch();)this.append(this.dataSet.getCurrent());if(this.keys.size!==o.length)throw new Error("[参数名称]与[值]个数不匹配");return this.items.get(this.buildObjectKey(o))},t.prototype.remove=function(t){this.items.delete(this.buildRecordKey(t))},t.prototype.append=function(t){this.items.set(this.buildRecordKey(t),t)},t.prototype.clear=function(){this.fields=null,this.keys.clear(),this.items.clear()},t.prototype.buildRecordKey=function(t){var e=[];return this.keys.forEach((function(o){return e.push(t.getString(o)||"null")})),e.join(";")},t.prototype.buildObjectKey=function(t){var e=[];return t.forEach((function(t){return e.push(""+t||"null")})),e.join(";")},t}(),u=function(){function t(t){void 0===t&&(t=null),this.recNo=0,this.fetchNo=-1,this.state=0,this.message="",this.fieldDefs=new n,this.metaInfo=!1,this.head=new i,this.records=[],t&&this.setJson(t)}return t.prototype.getCurrent=function(){if(this.eof())throw new Error("eof == true");if(this.bof())throw new Error("bof == true");var t=this.recNo-1;return this.records[t]},t.prototype.append=function(){var t=new i(this);return this.records.push(t),this.recNo=this.records.length,this},t.prototype.delete=function(){this.getCurrent()&&(this.setRecNo(this.getRecNo()-1),this.records.splice(this.getRecNo(),1))},t.prototype.first=function(){return this.records.length>0?this.recNo=1:this.recNo=0,this.fetchNo=-1,this.recNo>0},t.prototype.last=function(){return this.recNo=this.records.length,this.recNo>0},t.prototype.next=function(){return this.records.length>0&&this.recNo<=this.records.length&&(this.recNo++,!0)},t.prototype.bof=function(){return 0===this.recNo},t.prototype.eof=function(){return 0===this.records.length||this.recNo>this.records.length},t.prototype.size=function(){return this.records.length},t.prototype.getRecNo=function(){return this.recNo},t.prototype.setRecNo=function(t){if(t>this.records.length)throw new Error("RecNo "+this.recNo+" 大于总长度 "+this.records.length);t>-1&&(this.recNo=t)},t.prototype.fetch=function(){var t=!1;return this.fetchNo<this.records.length-1&&(this.fetchNo++,this.setRecNo(this.fetchNo+1),t=!0),t},t.prototype.copyRecord=function(t,e){var o=this.getCurrent();this.search?(this.search.remove(o),o.copyValues(t,e),this.search.append(o)):o.copyValues(t,e)},t.prototype.exists=function(t){return this.fieldDefs.exists(t)},t.prototype.getHead=function(){return null==this.head&&(this.head=new i),this.head},t.prototype.getRecords=function(){return this.records},t.prototype.getFieldDefs=function(){return this.fieldDefs},t.prototype.setValue=function(t,e){return this.getCurrent().setValue(t,e),this},t.prototype.getValue=function(t){return this.getCurrent().getValue(t)},t.prototype.getString=function(t){return this.getCurrent().getString(t)},t.prototype.getDouble=function(t){return this.getCurrent().getDouble(t)},t.prototype.getText=function(t){return this.getCurrent().getText(t)},t.prototype.clear=function(){this.getHead().getFieldDefs().clear(),this.getFieldDefs().clear(),this.close()},t.prototype.close=function(){this.head.close(),this.search=null,this.records=[],this.recNo=0,this.fetchNo=-1},t.prototype.locate=function(t,e){this.search||(this.search=new s(this));var o=this.search.get(t,e);return!!o&&(this.setRecNo(Array.from(this.records).indexOf(o)+1),!0)},t.prototype.getJson=function(){var t=this,e={};if(0!==this.state&&(e.state=this.state),this.message&&(e.message=this.message),this.metaInfo){if(e.meta={},this.getHead().getFieldDefs().size()>0){var o=[];this.getHead().getFieldDefs().forEach((function(t){var e={};t.getRemark()?e[t.getCode()]=[t.getType(),t.getName(),t.getRemark()]:t.getName()?e[t.getCode()]=[t.getType(),t.getName()]:e[t.getCode()]=[t.getType()],o.push(e)})),e.meta.head=o}if(this.records.length>0){var r=[];this.getFieldDefs().forEach((function(t){var e={};t.getRemark()?e[t.getCode()]=[t.getType(),t.getName(),t.getRemark()]:t.getName()?e[t.getCode()]=[t.getType(),t.getName()]:e[t.getCode()]=[t.getType()],r.push(e)})),e.meta.body=r}}if(this.head.size()>0&&(this.metaInfo?(e.head=[],this.head.getFieldDefs().forEach((function(o){e.head.push(t.head.getValue(o.getCode()))}))):(e.head={},this.head.forEach((function(t,o){e.head[t]=o})))),this.size()>0){if(e.body=[],!this.metaInfo){for(var n=[],i=0,s=this.getFieldDefs().getItems();i<s.length;i++){var u=s[i];n.push(u.getCode())}e.body.push(n)}for(var p=0,c=this.records;p<c.length;p++){for(var a=c[p],f=[],h=0,l=this.getFieldDefs().getItems();h<l.length;h++)u=l[h],f.push(a.getValue(u.getCode()));e.body.push(f)}}return JSON.stringify(e)},t.prototype.setJson=function(t){var e=this;if(this.clear(),!t)return this;if(!t)throw new Error("json is null!");"string"==typeof t&&(t=JSON.parse(t)),t.hasOwnProperty("state")&&(this.state=t.state),t.hasOwnProperty("message")&&(this.message=t.message);var o=[];if(t.hasOwnProperty("meta")){if(this.setMetaInfo(!0),this.meta=t.meta,this.meta.head){this.head=new i;var r=0;this.meta.head.forEach((function(o){for(var n in o){var i=o[n],s=e.head.getFieldDefs().add(n);i.length>2&&s.setRemark(i[2]),i.length>1&&s.setName(i[1]),i.length>0&&s.setType(i[0]),e.head.setValue(n,t.head[r]),r+=1}}))}if(this.meta.body){var n=0;this.meta.body.forEach((function(t){for(var r in t){var i=t[r],s=e.getFieldDefs().add(r);i.length>2&&s.setRemark(i[2]),i.length>1&&s.setName(i[1]),i.length>0&&s.setType(i[0]),o[n]=r,n+=1}}))}}else this.setMetaInfo(!1),t.hasOwnProperty("head")&&this.head.setJson(t.head);var s=t.dataset||t.body;if(s){if(s&&s.length>0)for(var u=0;u<s.length;u++)if(this.meta||0!=u)for(var p=s[u],c=this.append().getCurrent(),a=0;a<o.length;a++)c.setValue(o[a],p[a]);else o=s[0];this.first()}return this},t.prototype.getState=function(){return this.state},t.prototype.setState=function(t){return this.state=t,this},t.prototype.getMessage=function(){return this.message},t.prototype.setMessage=function(t){return this.message=t,this},t.prototype.setMetaInfo=function(t){return this.metaInfo=t,this},t.prototype.getMetaInfo=function(){return this.metaInfo},t.prototype.appendDataSet=function(t){var e=this;for(t.getHead().getFieldDefs().forEach((function(o){e.getHead().setValue(o.getCode(),t.getHead().getValue(o.getCode()))})),t.first();t.fetch();)this.append(),t.getFieldDefs().forEach((function(o){e.setValue(o.getCode(),t.getValue(o.getCode()))}))},t.prototype.forEach=function(t){for(var e=0,o=this.records;e<o.length;e++){var r=o[e];t.call(this,r)}},t}(),p=function(){function t(t){this.owner=null,this.sid=null,this.host="/services/",this._dataIn=new u,t&&(this.owner=t,t.sid&&(this.sid=t.sid),t.host&&(this.host=t.host))}return t.prototype.exec=function(t){if(this.service){var e=this.host+this.service;this.sid&&(e=e+"?sid="+this.sid),fetch(e,{method:"POST",body:"dataIn="+this.getDataIn().getJson(),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then((function(e){var o=e.headers.get("content-type");if("application/json;charset=utf-8"==o)return e.json();console.log(e.body),t.call(this,(new u).setMessage("not support:"+o))})).then((function(e){var o=new u(JSON.stringify(e));t.call(this,o)}))}else t.call(this,(new u).setMessage("service is null"))},t.prototype.getDataIn=function(){return this._dataIn},t.prototype.setDataIn=function(t){return this._dataIn=t,this},t.prototype.setHost=function(t){return this.host=t,this},t.prototype.setService=function(t){return this.service=t,this},t}();var c,a=(c=function(t,e){return c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},c(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});const f=function(t){function e(e){var o=t.call(this,e)||this;return o.sql="",o}return a(e,t),e.prototype.add=function(t){return this.sql=this.sql.trim()+" "+t.trim(),this},e.prototype.getSqlText=function(){return this.sql},e.prototype.setSqlText=function(t){return this.sql=t,this},e.prototype.open=function(t){this.setService(this.findTableName(this.sql)),this.getDataIn().getHead().setValue("_service_filter_",this.sql),this.exec(t)},e.prototype.findTableName=function(t){for(var e=null,o=t.split(" "),r=0;r<o.length;r++)if("from"==o[r].toLowerCase()){for(;null==o[r+1]||""==o[r+1].trim();)r++;e=o[++r];break}if(null==e)throw new Error("sql command error");return e},e}(p),h=function(){function t(){this.lines=[]}return t.prototype.print=function(t){return this.lines.push(t),this},t.prototype.println=function(t){return this.lines.push(t+"\n"),this},t.prototype.getText=function(){var t="";return this.lines.forEach((function(e){t+=e})),t},t}(),l=function(){function t(t){this.components=new Set,this.propertys=new Map,this.events=new Map,this.owner=t,this.setOwner(t)}return t.prototype.getOwner=function(){return this.owner},t.prototype.setOwner=function(t){return this.owner&&this.owner.removeComponent(this),t&&t.addComponent(this),this.owner=t,this},t.prototype.addComponent=function(t){return null==t||this.components.has(t)||(t.owner=this,null==t.origin&&(t.origin=null!=this.origin?this.origin:this),this.components.add(t)),this},t.prototype.removeComponent=function(t){return null!=t&&(t.origin==t.owner&&(t.origin=null),t.owner=null,this.components.delete(t)),this},t.prototype.getComponents=function(){return Array.from(this.components.values())},t.prototype.getComponentCount=function(){return this.components.size},t.prototype.setRootLabel=function(t){return this.rootLabel=t,this},t.prototype.getRootLabel=function(){return this.rootLabel},t.prototype.beginOutput=function(t){this.rootLabel&&(t.print("<"+this.rootLabel),this.propertys.forEach((function(e,o){t.print(" "+o+'="'+e+'"')})),t.print(">"))},t.prototype.output=function(t){this.beginOutput(t);for(var e=0,o=this.getComponents();e<o.length;e++)o[e].output(t);this.endOutput(t)},t.prototype.endOutput=function(t){this.rootLabel&&t.print("</"+this.rootLabel+">")},t.prototype.toString=function(){var t=new h;return this.output(t),t.getText()},t.prototype.readProperty=function(t){return this.propertys.get(t)},t.prototype.writeProperty=function(t,e){return this.propertys.set(t,e),this},t.prototype.getId=function(){return this.readProperty("id")},t.prototype.setId=function(t){return this.writeProperty("id",t),this},t.prototype.setCssClass=function(t){return this.writeProperty("class",t),this},t.prototype.getCssClass=function(){return this.readProperty("class")},t.prototype.setCssStyle=function(t){return this.writeProperty("style",t),this},t.prototype.getCssStyle=function(){return this.readProperty("style")},t.prototype.render=function(t){void 0===t&&(t=null),null!=t&&this.setContainer(t);var e=new h;if(this.output(e),"undefined"!=typeof document&&null!=document){var o=this.container?this.container:this.getId();if(!o)throw new Error("render error: container is null");var r=document.getElementById(o);if(!r)throw new Error("not find element: "+o);r.innerHTML=e.getText(),this.registerEvents(this)}else console.log(e.getText())},t.prototype.registerEvents=function(t){t.getId()&&t.events.forEach((function(e,o){var r=document.getElementById(t.getId());if(!r)throw new Error("not find element: "+t.getId());r.addEventListener(o,e)}));for(var e=0,o=t.getComponents();e<o.length;e++){var r=o[e];this.registerEvents(r)}},t.prototype.addEventListener=function(t,e){if(!this.getId())throw new Error("this id is null");this.events.set(t,e)},t.prototype.getName=function(){return this.readProperty("name")},t.prototype.setName=function(t){return this.writeProperty("name",t),this},t.prototype.getContainer=function(){return this.container},t.prototype.setContainer=function(t){return this.container=t,this},t}();var y=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const g=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("button"),o}return y(e,t),e.prototype.setText=function(t){return this.text=t,this},e.prototype.getText=function(){return this.text},e.prototype.output=function(t){this.beginOutput(t),this.text&&t.print(this.text),this.endOutput(t)},e}(l);var d=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const v=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("div"),o}return d(e,t),e}(l);var w=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const _=function(t){function e(e){return t.call(this,e)||this}return w(e,t),e.prototype.setText=function(t){this.text=t},e.prototype.getText=function(){return this.text},e.prototype.output=function(t){t.print(this.text)},e}(l);var m=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const b=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("span"),o}return m(e,t),e.prototype.setText=function(t){return this.span||(this.span=new _(this)),this.span.setText(t),this},e.prototype.getText=function(){return null==this.span?null:this.span.getText()},e}(l);var O=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const C=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("table"),o}return O(e,t),e.prototype.setBorder=function(t){return this.writeProperty("border",t),this},e.prototype.getBorder=function(){return this.readProperty("border")},e}(l);var T=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const S=function(t){function e(e){void 0===e&&(e=null);var o=t.call(this,e)||this;return o.setRootLabel("tr"),o}return T(e,t),e}(l);var x=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const P=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("th"),o}return x(e,t),e}(l);var E=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const j=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("td"),o}return E(e,t),e}(l);var N=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const D=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("form"),o}return N(e,t),e.prototype.setMethod=function(t){return this.writeProperty("method",t),this},e.prototype.getMethod=function(){return this.readProperty("method")},e.prototype.setAction=function(t){return this.writeProperty("action",t),this},e.prototype.getAction=function(){return this.readProperty("action")},e}(l);var V=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const I=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("hr"),o}return V(e,t),e.prototype.output=function(t){t.print("<hr/>")},e}(l);var R=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const A=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("a"),o.text=new _(o),o}return R(e,t),e.prototype.getHref=function(){return this.readProperty("href")},e.prototype.setHref=function(t){return this.writeProperty("href",t),this},e.prototype.getText=function(){return this.text.getText()},e.prototype.setText=function(t){return this.text.setText(t),this},e}(l);var F=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const L=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("input"),o}return F(e,t),e.prototype.setName=function(t){return this.writeProperty("name",t),this},e.prototype.getName=function(){return this.readProperty("name")},e.prototype.setValue=function(t){return this.writeProperty("value",t),this},e.prototype.getValue=function(){return this.readProperty("value")},e.prototype.getHtmlValue=function(){return document.getElementById(this.getId()).innerText},e}(l);var M=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const k=function(t){function e(e){return t.call(this,e)||this}return M(e,t),e.prototype.run=function(){this.render()},e}(l);var z=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const G=function(t){function e(e,o,r){void 0===r&&(r=null);var n=t.call(this,e)||this;return n.width=0,n._export=!0,n._visible=!0,n.code=o,n.name=r||o,n}return z(e,t),e.prototype.getCode=function(){return this.code},e.prototype.getName=function(){return this.name},e.prototype.getColspan=function(){return this.readProperty("colspan")},e.prototype.setColspan=function(t){return this.writeProperty("colspan",t),this},e.prototype.getWidth=function(){return this.width},e.prototype.setWidth=function(t){return this.width=t,this},e.prototype.setAlign=function(t){return this.align=t,this},e.prototype.getAlign=function(){return this.align},e.prototype.getExport=function(){return this._export},e.prototype.setExport=function(t){return this._export=t,this},e.prototype.getVisible=function(){return this._visible},e.prototype.setVisible=function(t){return this._visible=t,this},e}(l);var H=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const B=function(t){function e(e){var o=t.call(this,e)||this;return o.MaxWidth=600,o.titleVisiable=!0,o}return H(e,t),e.prototype.setCurrent=function(t){this.current=t},e.prototype.getCurrent=function(){return this.current},e.prototype.getTotalWidth=function(){var t=0;if(this.getComponents().forEach((function(e){e instanceof G&&(t+=e.getWidth())})),t<0)throw new Error("总列宽不允许小于1");if(t>this.MaxWidth)throw new Error("总列宽不允许大于 "+this.MaxWidth);return t},e.prototype.getTitleVisiable=function(){return this.titleVisiable},e.prototype.setTitleVisiable=function(t){return this.titleVisiable=t,this},e.prototype.getColumn=function(t){for(var e=0,o=this.getComponents();e<o.length;e++){var r=o[e];if(r.getCode()==t)return r}return null},e.prototype.forEach=function(t){for(var e=0,o=this.getComponents();e<o.length;e++){var r=o[e];r instanceof G&&t.call(this,r)}},e.prototype.outputOfGridTitle=function(t){if(this.getTitleVisiable()){for(var e=new S,o=0,r=this.getComponents();o<r.length;o++){var n=r[o];if(n instanceof G){var i=n;if(!i.getVisible())continue;var s=new P(e);if(i.getColspan()&&s.writeProperty("colspan",i.getColspan()),this.getTotalWidth()>0&&i.getWidth()>0){var u=i.getWidth()/this.getTotalWidth()*100;s.writeProperty("width",u.toFixed(1)+"%")}new _(s).setText(i.getName())}}e.output(t)}},e}(l);var W=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const J=function(t){function e(e){return t.call(this,e)||this}return W(e,t),e.prototype.output=function(t){var e=this,o=!1,r=new S;r.setId("tr"+this.getCurrent().getDataSet().getRecNo()),this.forEach((function(t){if(t.getVisible()){var n=e.getCurrent().getText(t.getCode()),i=new j(r);t.getColspan()&&i.writeProperty("colspan",t.getColspan()),t.getAlign()&&i.writeProperty("align",t.getAlign()),new _(i).setText(n),n&&(o=!0)}})),o&&r.output(t)},e.prototype.getColumnCount=function(){for(var t=0,e=0,o=this.getComponents();e<o.length;e++){o[e]instanceof G&&(t+=1)}return t},e}(B);var q=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const K=function(t){function e(e){var o=t.call(this,e)||this;return o.setTitleVisiable(!1),o}return q(e,t),e.prototype.output=function(t){for(var e=this,o=0,r=0,n=this.getOwner().getComponents();r<n.length&&n[r]!=this;r++)o+=1;var i="";if(this.forEach((function(t){if(t.getVisible()){var o=e.getCurrent().getText(t.getCode());o&&(i=i+t.getName()+": "+o+" ")}})),i.length>0){var s=new S;s.setId("tr"+this.getCurrent().getDataSet().getRecNo()+"_"+o),s.setCssStyle("display:none");var u=new j(s);this.master&&u.writeProperty("colspan",""+this.master.getColumnCount()),new _(u).setText(i),s.output(t)}},e.prototype.getMaster=function(){return this.master},e.prototype.setMaster=function(t){return this.master=t,this},e}(B);var U=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const Q=function(t){function e(e){var o=t.call(this,e)||this;return o.groups=[],o.setBorder("1"),o}return U(e,t),e.prototype.getDataSet=function(){return this.dataSet},e.prototype.setDataSet=function(t){return this.dataSet=t,this},e.prototype.output=function(t){if(0!=this.groups.length&&0!=this.groups[0].getComponentCount()){this.beginOutput(t);var e=null;if(this.groups.forEach((function(o){o instanceof J&&(e=o).outputOfGridTitle(t)})),this.groups.forEach((function(o){if(o instanceof K){var r=o;r.setMaster(e),r.outputOfGridTitle(t)}})),this.dataSet){this.dataSet.first();for(var o=function(){var e=r.dataSet.getCurrent();r.groups.forEach((function(o){o.setCurrent(e),o.output(t)}))},r=this;this.dataSet.fetch();)o()}this.endOutput(t)}},e.prototype.addColumns=function(t){for(var e=0,o=t.getItems();e<o.length;e++){var r=o[e];this.getColumn(r.getCode())||new G(this,r.getCode(),r.getName()?r.getName():r.getCode())}},e.prototype.addComponent=function(e){return e instanceof B?(t.prototype.addComponent.call(this,e),this.groups.push(e)):this.getGroup(0).addComponent(e),this},e.prototype.getGroup=function(t){if(t>this.groups.length-1)for(var e=t-this.groups.length+1,o=0;o<e;o++)new J(this);return this.groups[t]},e.prototype.getColumn=function(t){for(var e=0;e<this.groups.length;e++){var o=this.getGroup(e).getColumn(t);if(o)return o}return null},e.prototype.clear=function(){for(var t=0,e=this.getComponents();t<e.length;t++)e[t].setOwner(null);this.groups=[],this.dataSet=null},e.prototype.exportFile=function(t){for(var e=this,o="",r=0,n=this.groups;r<n.length;r++)n[r].getComponents().forEach((function(t){var e=t;e.getExport()&&(o+=e.getName()+",")}));for(o+="\n",this.dataSet.first();this.dataSet.fetch();){for(var i=0,s=this.groups;i<s.length;i++)s[i].getComponents().forEach((function(t){var r=t;if(r.getExport()){var n=e.dataSet.getText(r.getCode());o+=n.replace(/,/g,"，")+","}}));o+="\n"}var u=new Blob([o],{type:"text/plain;charset=utf-8"});u=new Blob([String.fromCharCode(65279),u],{type:u.type});var p=window.URL.createObjectURL(u),c=document.createElement("a");c.href=p,c.download=t,document.body.appendChild(c),c.click(),document.body.removeChild(c)},e}(C);var X=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const Y=function(t){function e(e){var o=t.call(this,e)||this;return o.pageSize=100,o.recordCount=0,o.pageNo=1,o}return X(e,t),e.prototype.getRecordCount=function(){return this.recordCount},e.prototype.setPageSize=function(t){return this.pageSize=t,this},e.prototype.getPageSize=function(){return this.pageSize},e.prototype.setPageNo=function(t){return t<1?this.pageNo=1:t<this.getCount()?this.pageNo=t:this.pageNo=this.getCount(),this},e.prototype.getPageNo=function(){return this.pageNo},e.prototype.setDataSet=function(t){return this.dataSet=t,t&&(this.recordCount=t.getRecords().length),this},e.prototype.getDataSet=function(){return this.dataSet},e.prototype.getBegin=function(){return(this.pageNo-1)*this.pageSize+1},e.prototype.getEnd=function(){var t=this.pageNo*this.pageSize;return t<this.recordCount?t:this.recordCount},e.prototype.getCount=function(){var t=this.recordCount%this.pageSize;return(this.recordCount-t)/this.pageSize+(t>0?1:0)},e.prototype.forEach=function(t){if(null==this.dataSet)throw new Error("this.dataSet is null");for(var e=this.getBegin();e<=this.getEnd();e++)this.dataSet.setRecNo(e+1),t(this.dataSet.getCurrent())},e}(l);var Z=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const $=function(t){function e(){var e=t.call(this,null)||this;return e.setContainer("app"),e}return Z(e,t),e.prototype.setTitle=function(t){return document.title=t,this},e.prototype.getTitle=function(){return document.title},e}(l);var tt=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const et=function(t){function e(e){return t.call(this,e)||this}return tt(e,t),e}(l);var ot=function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();const rt=function(t){function e(e){var o=t.call(this,e)||this;return o.setRootLabel("div"),o.label=new b(o),o.label.setText("label:"),o.input=new L(o),o}return ot(e,t),e.prototype.getLabel=function(){return this.label.getText()},e.prototype.setLabel=function(t){return this.label.setText(t),this},e.prototype.getDefaultValue=function(){return this.input.getValue()},e.prototype.setDefaultValue=function(t){return this.input.setValue(t),this},e.prototype.getValue=function(){if(!this.getId())throw new Error("this is is null");var t=document.getElementById(this.getId());if(!t)throw new Error("not find elementById: "+this.getId());return t.children[1].value},e}(l);window.sci=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,